#include<bits/stdc++.h>
using namespace std;
#define boost ios_base::sync_with_stdio(false); cin.tie(0);
#define int long long 
const int inf = 1e10;


struct segtree{
	vector<int> a;
	int size;
	int NEUTRAL_ELEMENT;
	void init(int n){
		NEUTRAL_ELEMENT = 0LL;
		size = 1;
		while(size < n) size *= 2;
		// !! this is 2*size !! //
		a.assign(2*size, NEUTRAL_ELEMENT);
	}
 
	void build(vector<int> &v, int x, int lx, int rx){
		if(rx - lx == 1){
			if(lx < (int)v.size()){
				a[x]|=(1LL<<v[lx]);
			}
			return;
		}
		int m = (lx + rx)/2;
		build(v, 2*x + 1, lx, m);
		build(v, 2*x + 2, m, rx);
		a[x] = a[2*x + 1] | a[2*x + 2];
	}
	void build(vector<int> &v){
		build(v, 0, 0, size);
	}
 
	void set(int i, int val, int x, int lx, int rx){
		if(rx - lx == 1){
			a[x] = NEUTRAL_ELEMENT;
			a[x]|=(1LL<<val);
			return;
		}
		int m = (lx + rx)/2;
		if(i<m) set(i, val, 2*x + 1, lx, m);
		else set(i, val, 2*x + 2, m, rx);
		a[x] = a[2*x + 1] | a[2*x + 2];
	}
	void set(int i, int val){
		set(i, val, 0, 0, size);
	}
 
 	int get(int l, int r, int x, int lx, int rx){
 		if(lx>=r || l>=rx) return NEUTRAL_ELEMENT;
 		if(lx>=l && rx<=r) return a[x];
 		int m = (lx + rx)/2;
 		int p1 = get(l, r, 2*x + 1, lx, m);
 		int p2 = get(l, r, 2*x + 2, m, rx);
 		return p1|p2;
 	}

	int get(int l, int r){
		int x = get(l, r, 0, 0, size);
		// cout << x <<" \n";
		int ans = 0;
		for(int i=1;i<=40;i++){
			if(x&(1LL<<i)){
				ans++;
			}
		}
		return ans;
	}
};
signed main(){
	boost
	int n, q;
	cin >> n >> q;
	vector<int> a(n);
	segtree st;
	st.init(n);
	for(int i=0;i<n;i++){
		cin>>a[i];
	}
	st.build(a);
	while(q--){
		int op;
		cin >> op;
		if(op == 1){
			int l, r;
			cin >> l >> r;
			l--;
			cout << st.get(l, r) << "\n";
		}
		else{
			int i, val;
			cin >> i >> val;
			i--;
			st.set(i, val);
		}
	}
	return 0;
}